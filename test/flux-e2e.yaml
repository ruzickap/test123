name: Flux e2e

on:
  workflow_dispatch:
  push:
    branches-ignore:
      - main
    paths:
      - .github/workflows/flux-e2e.yaml
      - "**/flux/**"

env:
  CLUSTER_PATH: clusters/aws-dev-mgmt2/mgmt02.k8s.use1.dev.proj.aws.mylabs.dev
  SLACK_CHANNEL: mylabs
  # Details needed to allow Flux get KMS to decrypt SOPS encrypted files
  AWS_ASSUME_ROLE: "arn:aws:iam::729560437327:role/GitHubOidcFederatedRole"
  AWS_DEFAULT_REGION: us-east-1

jobs:
  flux-e2e:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Flux
        uses: fluxcd/flux2/action@main
        with:
          # renovate: datasource=github-tags depName=fluxcd/flux2
          version: 0.31.4

      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.3.0

      - name: Install Flux in Kubernetes Kind
        run: |
          set -euxo pipefail
          flux install

      - name: ðŸ’¡ðŸ”ª Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.AWS_ASSUME_ROLE }}
          role-session-name: GitHubOidcFederatedRole
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Add AWS credentials to allow flux to access the KMS
        run: |
          kubectl create secret generic aws-creds -n flux-system \
            --from-literal=AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}" \
            --from-literal=AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}" \
            --from-literal=AWS_SESSION_TOKEN="${AWS_SESSION_TOKEN}" \
            --from-literal=AWS_DEFAULT_REGION="${AWS_DEFAULT_REGION}"

      - name: Set other env variables
        run: |
          set -euxo pipefail
          CLUSTER_FQDN=$(basename ${{ env.CLUSTER_PATH }})
          cat << EOF | tee -a "${GITHUB_ENV}"
          CLUSTER_FQDN=${CLUSTER_FQDN}
          CLUSTER_NAME=${CLUSTER_FQDN%%.*}
          CLUSTER_PATH=${{ env.CLUSTER_PATH }}
          EOF

      - name: Create ConfigMap/cluster-apps-vars-terraform-configmap
        run: |
          set -euxo pipefail
          kubectl create configmap -n flux-system cluster-apps-vars-terraform-configmap \
            --from-literal=CLUSTER_FQDN="${CLUSTER_FQDN}" \
            --from-literal=CLUSTER_NAME="${CLUSTER_NAME}" \
            --from-literal=CLUSTER_PATH="${CLUSTER_PATH}" \
            --from-literal=EMAIL="myemail@example.com" \
            --from-literal=ENVIRONMENT="dev" \
            --from-literal=SLACK_CHANNEL="${SLACK_CHANNEL}" \
            --from-literal=TAGS_INLINE="tag1=test1,tag2=test2,tag3=test3"

      - name: Setup cluster reconciliation
        run: |
          set -euo pipefail

          kustomize build "${CLUSTER_PATH}/flux/flux-system" | kubectl apply -f -
          sleep 10
          kubectl patch deployment kustomize-controller -n flux-system -p '{"spec": {"template": {"spec": {"containers": [{"name":"manager", "envFrom": [{"secretRef":{"name":"aws-creds"}}] }] }}}}'

          # flux create source git flux-system --url="https://github.com/${GITHUB_REPOSITORY}" --branch="$(git rev-parse --abbrev-ref HEAD)"

          # kubectl apply -f - << EOF2
          # apiVersion: kustomize.toolkit.fluxcd.io/v1beta2
          # kind: Kustomization
          # metadata:
          #   name: flux-system
          #   namespace: flux-system
          # spec:
          #   interval: 10m0s
          #   path: ./${CLUSTER_PATH}/flux
          #   prune: true
          #   sourceRef:
          #     kind: GitRepository
          #     name: flux-system
          #   postBuild:
          #     substituteFrom:
          #       - kind: ConfigMap
          #         name: cluster-apps-vars-terraform-configmap
          # EOF2

      - name: Verify cluster reconciliation
        run: |
          set -euxo pipefail
          sleep 10
          kubectl wait kustomization --for=condition=ready --timeout=5m --all-namespaces --all
          kubectl wait helmrelease --for=condition=ready --timeout=5m --all-namespaces --all
          flux logs

      - name: Debug failure
        if: failure()
        run: |
          set -euxo pipefail
          kubectl -n flux-system get all
          flux get all --all-namespaces
          kubectl -n flux-system logs deploy/source-controller
          kubectl -n flux-system logs deploy/kustomize-controller
          kubectl -n flux-system logs deploy/helm-controller

      # - name: Setup tmate session
      #   if: ${{ failure() }}
      #   uses: mxschmitt/action-tmate@v3
      #   with:
      #     limit-access-to-actor: true

  flux-k3d-cluster:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Flux
        uses: fluxcd/flux2/action@main
        with:
          # renovate: datasource=github-tags depName=fluxcd/flux2
          version: 0.31.4

      - name: Install k3d
        run: |
          set -euxo pipefail
          curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash

      - name: ðŸ’¡ðŸ”ª Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.AWS_ASSUME_ROLE }}
          role-session-name: GitHubOidcFederatedRole
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Set other env variables
        run: |
          set -euxo pipefail
          CLUSTER_FQDN=$(basename ${{ env.CLUSTER_PATH }})
          cat << EOF | tee -a "${GITHUB_ENV}"
          CLUSTER_FQDN=${CLUSTER_FQDN}
          CLUSTER_NAME=${CLUSTER_FQDN%%.*}
          EOF

      - name: Execute flux-k3d-cluster.sh
        run: |
          set -euxo pipefail
          ./scripts/flux-k3d-cluster.sh "${CLUSTER_FQDN}"

      - name: Execute flux-k3d-cluster.sh | sh -x
        run: |
          set -euxo pipefail
          ./scripts/flux-k3d-cluster.sh "${CLUSTER_FQDN}" | sh
          echo "KUBECONFIG=/tmp/kubeconfig-${CLUSTER_NAME}.conf" | tee -a "${GITHUB_ENV}"

      - name: Verify cluster reconciliation
        run: |
          set -euxo pipefail
          sleep 10
          kubectl wait kustomization --for=condition=ready --timeout=5m --all-namespaces --all
          kubectl wait helmrelease --for=condition=ready --timeout=5m --all-namespaces --all

      - name: Debug failure
        if: failure()
        run: |
          set -euxo pipefail
          kubectl -n flux-system get all
          flux get all --all-namespaces
          kubectl -n flux-system logs deploy/source-controller
          kubectl -n flux-system logs deploy/kustomize-controller
          kubectl -n flux-system logs deploy/helm-controller
